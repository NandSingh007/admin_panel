{"version":3,"file":"static/js/9849.0143a495.chunk.js","mappings":"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","sources":["components/Account/Mycommision.js","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx","../node_modules/@coreui/react/src/components/table/CTableFoot.tsx","../node_modules/@coreui/react/src/components/table/CTableResponsiveWrapper.tsx","../node_modules/@coreui/react/src/components/table/utils.ts","../node_modules/@coreui/react/src/components/table/CTable.tsx","../node_modules/@coreui/react/src/components/table/CTableBody.tsx","../node_modules/@coreui/react/src/components/table/CTableCaption.tsx","../node_modules/@coreui/react/src/components/table/CTableDataCell.tsx","../node_modules/@coreui/react/src/components/table/CTableHead.tsx","../node_modules/@coreui/react/src/components/table/CTableHeaderCell.tsx","../node_modules/@coreui/react/src/components/table/CTableRow.tsx","webpack://@coreui/coreui-free-react-admin-template/./src/components/Account/css/Designer.module.css?3d5d"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { CContainer, CRow, CCol, CCard, CTableDataCell, CTableHeaderCell, CTable, CTableRow, CTableHead, CTableBody } from '@coreui/react';\r\nimport '../Account/css/Myprofile.css';\r\n// import InputTeg from './InputTeg';\r\nimport styless from '../Account/css/Designer.module.css';\r\n// import img from '../../assets/images/react.jpg'\r\n\r\nconst Mycommision = () => {\r\n\r\n    const obj = {\r\n        Mobile: \"Mobile\",\r\n        Dth: \"Dth\",\r\n        Electricity: \"Electricity\",\r\n        Pancard: \"Pancard\",\r\n        Aeps: \"Aeps\",\r\n        DMT: \"Dmt\"\r\n    };\r\n\r\n    // const { cartitem3 } = useSelector((state) => state.add);\r\n    const [activeSectionKey, setActiveSectionKey] = useState(Object.keys(obj)[0]);\r\n    // const [mge, setMge] = useState('');\r\n\r\n    // const [storage, setStorage] = useState({\r\n    //     Pancard: \"\",\r\n    //     Gst: \"\",\r\n    //     Shop: \"\",\r\n    //     AdharCard: \"\",\r\n    // });\r\n\r\n    // const [storag2, setstorag2] = useState({\r\n    //     oldpassword: \"\",\r\n    //     newpassword: \"\",\r\n    //     confirmpassword: \"\",\r\n    // });\r\n\r\n\r\n    // const [storag4, setstorag4] = useState({\r\n    //     name: \"\",\r\n    //     email: \"\",\r\n    //     number: \"\",\r\n    //     address: \"\",\r\n    //     image: \"\",\r\n    //     State: \"\",\r\n    //     City: \"\",\r\n    //     Pincode: \"\",\r\n    //     amount: \"\",\r\n    // });\r\n\r\n    // const handleImageChange = (e) => {\r\n    //     const name = e.target.name;\r\n    //     const file = e.target.files[0];\r\n    //     const reader = new FileReader();\r\n\r\n    //     reader.onloadend = () => {\r\n    //         setstorag4({ ...storag4, [name]: reader.result });\r\n    //         setMge(reader.result);\r\n    //     };\r\n    //     if (file) {\r\n    //         reader.readAsDataURL(file);\r\n    //     }\r\n    // };\r\n\r\n    // const handleInput = (e) => {\r\n    //     const name = e.target.name;\r\n    //     const value = e.target.value;\r\n    //     setstorag4({ ...storag4, [name]: value });\r\n    // };\r\n    // const handleInput1 = (e) => {\r\n    //     const name = e.target.name;\r\n    //     const value = e.target.value;\r\n    //     setStorage({ ...storage, [name]: value });\r\n    // };\r\n\r\n    // const handleInput2 = (e) => {\r\n    //     const name = e.target.name;\r\n    //     const value = e.target.value;\r\n    //     setstorag2({ ...storag2, [name]: value });\r\n    // };\r\n\r\n    // function submit1() {\r\n    //     console.log(storage)\r\n    //     // alert(\"please fill the form\");\r\n    // }\r\n\r\n    // function submit2() {\r\n    //     console.log(storag2)\r\n    // }\r\n    // const submit4 = event => {\r\n    //     event.preventDefault()\r\n    //     console.log(storag4)\r\n    // setActiveSectionKey(Object.keys(obj)[1]);\r\n    // alert(\"please fill the form\");\r\n    // }\r\n\r\n    const Mobile = (\r\n        // <div className=\"row\">\r\n        <>\r\n            <CTable bordered className='table'>\r\n                <CTableHead>\r\n                    <CTableRow>\r\n                        <CTableHeaderCell scope=\"col\">Provider</CTableHeaderCell>\r\n                        <CTableHeaderCell scope=\"col\">Types</CTableHeaderCell>\r\n                        <CTableHeaderCell scope=\"col\">Value</CTableHeaderCell>\r\n                    </CTableRow>\r\n                </CTableHead>\r\n                <CTableBody>\r\n                    <CTableRow >\r\n                        <CTableDataCell>Mark</CTableDataCell>\r\n                        <CTableDataCell>Otto</CTableDataCell>\r\n                        <CTableDataCell>@mdo</CTableDataCell>\r\n                    </CTableRow>\r\n                    <CTableRow>\r\n                        <CTableDataCell>Jacob</CTableDataCell>\r\n                        <CTableDataCell>Thornton</CTableDataCell>\r\n                        <CTableDataCell>@fat</CTableDataCell>\r\n                    </CTableRow>\r\n                    <CTableRow>\r\n                        <CTableDataCell>Jacob</CTableDataCell>\r\n                        <CTableDataCell>Thornton</CTableDataCell>\r\n                        <CTableDataCell>@fat</CTableDataCell>\r\n                    </CTableRow>\r\n                    <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n                </CTableBody>\r\n            </CTable>\r\n        </>\r\n    )\r\n    // personal information end\r\n    // Kycrmation part start\r\n\r\n    const Dth = (\r\n        <CTable bordered className='table'>\r\n            <CTableHead>\r\n                <CTableRow>\r\n                    <CTableHeaderCell scope=\"col\">Provider</CTableHeaderCell>\r\n                    <CTableHeaderCell scope=\"col\">Types</CTableHeaderCell>\r\n                    <CTableHeaderCell scope=\"col\">Value</CTableHeaderCell>\r\n                </CTableRow>\r\n            </CTableHead>\r\n            <CTableBody>\r\n                <CTableRow >\r\n                    <CTableDataCell>Mark</CTableDataCell>\r\n                    <CTableDataCell>Otto</CTableDataCell>\r\n                    <CTableDataCell>@mdo</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow >\r\n                    <CTableDataCell>Mark</CTableDataCell>\r\n                    <CTableDataCell>Otto</CTableDataCell>\r\n                    <CTableDataCell>@mdo</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n            </CTableBody>\r\n        </CTable>\r\n    )\r\n    // Kycrmation part end\r\n\r\n    // oldpassword part starts\r\n    const Electricity = (\r\n        <CTable bordered className='table'>\r\n            <CTableHead>\r\n                <CTableRow>\r\n                    <CTableHeaderCell scope=\"col\">Provider</CTableHeaderCell>\r\n                    <CTableHeaderCell scope=\"col\">Types</CTableHeaderCell>\r\n                    <CTableHeaderCell scope=\"col\">Value</CTableHeaderCell>\r\n                </CTableRow>\r\n            </CTableHead>\r\n            <CTableBody>\r\n                <CTableRow >\r\n                    <CTableDataCell>Mark</CTableDataCell>\r\n                    <CTableDataCell>Otto</CTableDataCell>\r\n                    <CTableDataCell>@mdo</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow >\r\n                    <CTableDataCell>Mark</CTableDataCell>\r\n                    <CTableDataCell>Otto</CTableDataCell>\r\n                    <CTableDataCell>@mdo</CTableDataCell>\r\n                </CTableRow>\r\n            </CTableBody>\r\n        </CTable>\r\n    )\r\n    // oldpassword part end\r\n    //Logout part start\r\n    const Pancard = (\r\n        <CTable bordered className='table'>\r\n            <CTableHead>\r\n                <CTableRow>\r\n                    <CTableHeaderCell scope=\"col\">Provider</CTableHeaderCell>\r\n                    <CTableHeaderCell scope=\"col\">Types</CTableHeaderCell>\r\n                    <CTableHeaderCell scope=\"col\">Value</CTableHeaderCell>\r\n                </CTableRow>\r\n            </CTableHead>\r\n            <CTableBody>\r\n                <CTableRow >\r\n                    <CTableDataCell>Mark</CTableDataCell>\r\n                    <CTableDataCell>Otto</CTableDataCell>\r\n                    <CTableDataCell>@mdo</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow >\r\n                    <CTableDataCell>Mark</CTableDataCell>\r\n                    <CTableDataCell>Otto</CTableDataCell>\r\n                    <CTableDataCell>@mdo</CTableDataCell>\r\n                </CTableRow>\r\n            </CTableBody>\r\n        </CTable>\r\n    )\r\n\r\n    const Aeps = (\r\n        <CTable bordered className='table'>\r\n            <CTableHead>\r\n                <CTableRow>\r\n                    <CTableHeaderCell scope=\"col\">Provider</CTableHeaderCell>\r\n                    <CTableHeaderCell scope=\"col\">Types</CTableHeaderCell>\r\n                    <CTableHeaderCell scope=\"col\">Value</CTableHeaderCell>\r\n                </CTableRow>\r\n            </CTableHead>\r\n            <CTableBody>\r\n                <CTableRow >\r\n                    <CTableDataCell>Mark</CTableDataCell>\r\n                    <CTableDataCell>Otto</CTableDataCell>\r\n                    <CTableDataCell>@mdo</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow >\r\n                    <CTableDataCell>Mark</CTableDataCell>\r\n                    <CTableDataCell>Otto</CTableDataCell>\r\n                    <CTableDataCell>@mdo</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n            </CTableBody>\r\n        </CTable>\r\n    )\r\n\r\n    const Dmt = (\r\n        <CTable bordered className='table'>\r\n            <CTableHead>\r\n                <CTableRow>\r\n                    <CTableHeaderCell scope=\"col\">Provider</CTableHeaderCell>\r\n                    <CTableHeaderCell scope=\"col\">Types</CTableHeaderCell>\r\n                    <CTableHeaderCell scope=\"col\">Value</CTableHeaderCell>\r\n                </CTableRow>\r\n            </CTableHead>\r\n            <CTableBody>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n                <CTableRow>\r\n                    <CTableDataCell>Jacob</CTableDataCell>\r\n                    <CTableDataCell>Thornton</CTableDataCell>\r\n                    <CTableDataCell>@fat</CTableDataCell>\r\n                </CTableRow>\r\n            </CTableBody>\r\n        </CTable>\r\n    )\r\n\r\n\r\n    const generateBody = () => {\r\n        switch (obj[activeSectionKey]) {\r\n            case obj.Mobile: return Mobile;\r\n            case obj.Dth: return Dth;\r\n            case obj.Electricity: return Electricity;\r\n            case obj.Pancard: return Pancard;\r\n            case obj.Aeps: return Aeps;\r\n            case obj.DMT: return Dmt;\r\n            default: return null;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <CContainer>\r\n                <CRow>\r\n                    <CCol md={12} >\r\n                        <CCard >\r\n                            <CRow>\r\n                                {Object.keys(obj)?.map((item) => (\r\n                                    <CCol\r\n                                        className={`${styless.section} ${activeSectionKey === item ? styless.activee : \"\"}`}\r\n                                        key={item}\r\n                                        onClick={() => setActiveSectionKey(item)}\r\n                                    >\r\n                                        {obj[item]}\r\n                                    </CCol>\r\n                                ))}\r\n                            </CRow>\r\n                        </CCard>\r\n                        <CCard>\r\n                            {generateBody()}\r\n                        </CCard>\r\n                    </CCol>\r\n                </CRow>\r\n            </CContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Mycommision;\r\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n","import PropTypes from 'prop-types'\nimport React, { forwardRef, HTMLAttributes } from 'react'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableFootProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableFoot = forwardRef<HTMLTableSectionElement, CTableFootProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <tfoot\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </tfoot>\n    )\n  },\n)\n\nCTableFoot.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableFoot.displayName = 'CTableFoot'\n","import React, { FC, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\n\nexport interface CTableResponsiveWrapperProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Make any table responsive across all viewports or pick a maximum breakpoint with which to have a responsive table up to.\n   */\n  responsive?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n}\n\nexport const CTableResponsiveWrapper: FC<CTableResponsiveWrapperProps> = ({\n  children,\n  responsive,\n  ...rest\n}) => {\n  return responsive ? (\n    <div\n      className={\n        typeof responsive === 'boolean' ? 'table-responsive' : `table-responsive-${responsive}`\n      }\n      {...rest}\n    >\n      {children}\n    </div>\n  ) : (\n    <>{children}</>\n  )\n}\n\nCTableResponsiveWrapper.propTypes = {\n  children: PropTypes.node,\n  responsive: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n}\n\nCTableResponsiveWrapper.displayName = 'CTableResponsiveWrapper'\n","import type { Column, Item } from './types'\n\nexport const pretifyName = (name: string) => {\n  return name\n    .replace(/[-_.]/g, ' ')\n    .replace(/ +/g, ' ')\n    .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\n    .split(' ')\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ')\n}\n\nexport const getColumnLabel = (column: Column | string) =>\n  typeof column === 'object' ? column.label ?? pretifyName(column.key) : pretifyName(column)\n\nexport const getColumnNames = (columns: (string | Column)[] | undefined, items?: Item[]) =>\n  columns\n    ? columns.map((column: Column | string) => {\n        return typeof column === 'object' ? column.key : column\n      })\n    : items && getColumnNamesFromItems(items)\n\nexport const getColumnNamesFromItems = (items: Item[]) =>\n  Object.keys(items[0] || {}).filter((el) => el.charAt(0) !== '_')\n","import React, { forwardRef, TableHTMLAttributes, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CTableHead, CTableHeadProps } from './CTableHead'\nimport { CTableHeaderCell } from './CTableHeaderCell'\nimport { CTableBody } from './CTableBody'\nimport { CTableDataCell } from './CTableDataCell'\nimport { CTableRow } from './CTableRow'\nimport { CTableFoot, CTableFootProps } from './CTableFoot'\nimport { CTableCaption } from './CTableCaption'\nimport { CTableResponsiveWrapper } from './CTableResponsiveWrapper'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\nimport { getColumnLabel, getColumnNames } from './utils'\nimport type { Column, FooterItem, Item } from './types'\n\nexport interface CTableProps extends Omit<TableHTMLAttributes<HTMLTableElement>, 'align'> {\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * Sets the border color of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  borderColor?: Colors\n  /**\n   * Add borders on all sides of the table and cells.\n   */\n  bordered?: boolean\n  /**\n   * Remove borders on all sides of the table and cells.\n   */\n  borderless?: boolean\n  /**\n   * Put the caption on the top if you set `caption=\"top\"` of the table or set the text of the table caption.\n   */\n  caption?: 'top' | string\n  /**\n   * Set the text of the table caption and the caption on the top of the table.\n   *\n   * @since 4.3.0\n   */\n  captionTop?: string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Prop for table columns configuration. If prop is not defined, table will display columns based on the first item keys, omitting keys that begins with underscore (e.g. '_props')\n   *\n   * In columns prop each array item represents one column. Item might be specified in two ways:\n   * String: each item define column name equal to item value.\n   * Object: item is object with following keys available as column configuration:\n   * - key (required)(String) - define column name equal to item key.\n   * - label (String) - define visible label of column. If not defined, label will be generated automatically based on column name, by converting kebab-case and snake_case to individual words and capitalization of each word.\n   * - _props (Object) - adds classes to all cels in column, ex. `_props: { scope: 'col', className: 'custom-class' }`,\n   * - _style (Object) - adds styles to the column header (useful for defining widths)\n   *\n   * @since 4.3.0\n   */\n  columns?: (string | Column)[]\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Array of objects or strings, where each element represents one cell in the table footer.\n   *\n   * Example items:\n   * `['FooterCell', 'FooterCell', 'FooterCell']`\n   * or\n   * `[{ label: 'FooterCell', _props: { color: 'success' }, ...]`\n   *\n   * @since 4.3.0\n   */\n  footer?: (FooterItem | string)[]\n  /**\n   * Enable a hover state on table rows within a `<CTableBody>`.\n   */\n  hover?: boolean\n  /**\n   * Array of objects, where each object represents one item - row in table. Additionally, you can add style classes to each row by passing them by '_props' key and to single cell by '_cellProps'.\n   *\n   * Example item:\n   * `{ name: 'John' , age: 12, _props: { color: 'success' }, _cellProps: { age: { className: 'fw-bold'}}}`\n   *\n   * @since 4.3.0\n   */\n  items?: Item[]\n  /**\n   * Make any table responsive across all viewports or pick a maximum breakpoint with which to have a responsive table up to.\n   */\n  responsive?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Make table more compact by cutting all cell `padding` in half.\n   */\n  small?: boolean\n  /**\n   * Add zebra-striping to any table row within the `<CTableBody>`.\n   */\n  striped?: boolean\n  /**\n   * Add zebra-striping to any table column.\n   *\n   * @since 4.3.0\n   */\n  stripedColumns?: boolean\n  /**\n   * Properties that will be passed to the table footer component.\n   *\n   * @link https://coreui.io/react/docs/components/table/#ctablefoot\n   * @since 4.3.0\n   */\n  tableFootProps?: CTableFootProps\n  /**\n   * Properties that will be passed to the table head component.\n   *\n   * @link https://coreui.io/react/docs/components/table/#ctablehead\n   * @since 4.3.0\n   */\n  tableHeadProps?: CTableHeadProps\n}\n\nexport const CTable = forwardRef<HTMLTableElement, CTableProps>(\n  (\n    {\n      children,\n      align,\n      borderColor,\n      bordered,\n      borderless,\n      caption,\n      captionTop,\n      className,\n      color,\n      columns,\n      footer,\n      hover,\n      items,\n      responsive,\n      small,\n      striped,\n      stripedColumns,\n      tableFootProps,\n      tableHeadProps,\n      ...rest\n    },\n    ref,\n  ) => {\n    const columnNames = useMemo(() => getColumnNames(columns, items), [columns, items])\n\n    return (\n      <CTableResponsiveWrapper responsive={responsive}>\n        <table\n          className={classNames(\n            'table',\n            {\n              [`align-${align}`]: align,\n              [`border-${borderColor}`]: borderColor,\n              [`caption-top`]: captionTop || caption === 'top',\n              'table-bordered': bordered,\n              'table-borderless': borderless,\n              [`table-${color}`]: color,\n              'table-hover': hover,\n              'table-sm': small,\n              'table-striped': striped,\n              'table-striped-columns': stripedColumns,\n            },\n            className,\n          )}\n          {...rest}\n          ref={ref}\n        >\n          {((caption && caption !== 'top') || captionTop) && (\n            <CTableCaption>{caption || captionTop}</CTableCaption>\n          )}\n          {columns && (\n            <CTableHead {...tableHeadProps}>\n              <CTableRow>\n                {columns.map((column: Column, index: number) => (\n                  <CTableHeaderCell\n                    {...(column._props && { ...column._props })}\n                    {...(column._style && { style: { ...column._style } })}\n                    key={index}\n                  >\n                    {getColumnLabel(column)}\n                  </CTableHeaderCell>\n                ))}\n              </CTableRow>\n            </CTableHead>\n          )}\n          {items && (\n            <CTableBody>\n              {items.map((item: Item, index: number) => (\n                <CTableRow {...(item._props && { ...item._props })} key={index}>\n                  {columnNames &&\n                    columnNames.map((colName: string, index: number) => {\n                      // eslint-disable-next-line unicorn/no-negated-condition\n                      return item[colName] !== undefined ? (\n                        <CTableDataCell\n                          {...(item._cellProps && {\n                            ...(item._cellProps['all'] && { ...item._cellProps['all'] }),\n                            ...(item._cellProps[colName] && { ...item._cellProps[colName] }),\n                          })}\n                          key={index}\n                        >\n                          {item[colName]}\n                        </CTableDataCell>\n                      ) : null\n                    })}\n                </CTableRow>\n              ))}\n            </CTableBody>\n          )}\n          {children}\n          {footer && (\n            <CTableFoot {...tableFootProps}>\n              <CTableRow>\n                {footer.map((item: FooterItem | string, index: number) => (\n                  <CTableDataCell\n                    {...(typeof item === 'object' && item._props && { ...item._props })}\n                    key={index}\n                  >\n                    {typeof item === 'object' ? item.label : item}\n                  </CTableDataCell>\n                ))}\n              </CTableRow>\n            </CTableFoot>\n          )}\n        </table>\n      </CTableResponsiveWrapper>\n    )\n  },\n)\n\nCTable.propTypes = {\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  borderColor: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  caption: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf(['top'])]),\n  captionTop: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  columns: PropTypes.array,\n  footer: PropTypes.array,\n  hover: PropTypes.bool,\n  items: PropTypes.array,\n  responsive: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  small: PropTypes.bool,\n  striped: PropTypes.bool,\n  stripedColumns: PropTypes.bool,\n  tableFootProps: PropTypes.shape({ ...CTableFoot.propTypes }),\n  tableHeadProps: PropTypes.shape({ ...CTableHead.propTypes }),\n}\n\nCTable.displayName = 'CTable'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableBodyProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableBody = forwardRef<HTMLTableSectionElement, CTableBodyProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <tbody\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </tbody>\n    )\n  },\n)\n\nCTableBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableBody.displayName = 'CTableBody'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const CTableCaption = forwardRef<\n  HTMLTableCaptionElement,\n  HTMLAttributes<HTMLTableCaptionElement>\n>(({ children, ...props }, ref) => {\n  return (\n    <caption {...props} ref={ref}>\n      {children}\n    </caption>\n  )\n})\n\nCTableCaption.propTypes = {\n  children: PropTypes.node,\n}\n\nCTableCaption.displayName = 'CTableCaption'\n","import React, { forwardRef, TdHTMLAttributes, ThHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableDataCellProps\n  extends Omit<TdHTMLAttributes<HTMLTableCellElement>, 'align'>,\n    Omit<ThHTMLAttributes<HTMLTableCellElement>, 'align'> {\n  /**\n   * Highlight a table row or cell.\n   */\n  active?: boolean\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * @ignore\n   */\n  colSpan?: number\n}\n\nexport const CTableDataCell = forwardRef<HTMLTableCellElement, CTableDataCellProps>(\n  ({ children, active, align, className, color, ...rest }, ref) => {\n    const Component = rest.scope ? 'th' : 'td'\n\n    return (\n      <Component\n        className={\n          classNames(\n            {\n              [`align-${align}`]: align,\n              'table-active': active,\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </Component>\n    )\n  },\n)\n\nCTableDataCell.propTypes = {\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableDataCell.displayName = 'CTableDataCell'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableHeadProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableHead = forwardRef<HTMLTableSectionElement, CTableHeadProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <thead\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </thead>\n    )\n  },\n)\n\nCTableHead.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableHead.displayName = 'CTableHead'\n","import React, { forwardRef, ThHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableHeaderCellProps extends ThHTMLAttributes<HTMLTableCellElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableHeaderCell = forwardRef<HTMLTableCellElement, CTableHeaderCellProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <th\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </th>\n    )\n  },\n)\n\nCTableHeaderCell.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableHeaderCell.displayName = 'CTableHeaderCell'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableRowProps extends HTMLAttributes<HTMLTableRowElement> {\n  /**\n   * Highlight a table row or cell..\n   */\n  active?: boolean\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableRow = forwardRef<HTMLTableRowElement, CTableRowProps>(\n  ({ children, active, align, className, color, ...rest }, ref) => {\n    return (\n      <tr\n        className={\n          classNames(\n            {\n              [`align-${align}`]: align,\n              'table-active': active,\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </tr>\n    )\n  },\n)\n\nCTableRow.propTypes = {\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableRow.displayName = 'CTableRow'\n","// extracted by mini-css-extract-plugin\nexport default {\"detail_page\":\"Designer_detail_page__l5lVu\",\"btn2\":\"Designer_btn2__4lZFj\",\"add_more\":\"Designer_add_more__vEcQ0\",\"col-md-6\":\"Designer_col-md-6__wZDIg\",\"row\":\"Designer_row__Q+dcQ\",\"details\":\"Designer_details__PUbvd\",\"right_page\":\"Designer_right_page__MII9S\",\"left_page\":\"Designer_left_page__snh6i\",\"section\":\"Designer_section__Gi-pp\",\"activee\":\"Designer_activee__dVqBG\",\"lab\":\"Designer_lab__wCG3p\",\"add_more_btn\":\"Designer_add_more_btn__lcLVV\",\"link\":\"Designer_link__Npzju\",\"btn1\":\"Designer_btn1__exmDn\",\"mg\":\"Designer_mg__-KzdE\",\"profile_title_heading\":\"Designer_profile_title_heading__sMYkC\",\"experience_title_heading\":\"Designer_experience_title_heading__QZTgK\",\"lb\":\"Designer_lb__-4dik\"};"],"names":["Mycommision","_Object$keys","obj","Mobile","Dth","Electricity","Pancard","Aeps","DMT","activeSectionKey","setActiveSectionKey","useState","Object","keys","_jsx","_Fragment","children","_jsxs","CTable","bordered","className","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","CTableDataCell","Dmt","CContainer","CRow","CCol","md","CCard","map","item","concat","styless","section","activee","onClick","generateBody","forwardRef","_a","ref","color","textColor","rest","__rest","React","__assign","classNames","_b","propTypes","PropTypes","colorPropType","displayName","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","length","col","xs","sm","lg","xl","xxl","cols","gutter","gutterX","gutterY","CTableFoot","undefined","CTableResponsiveWrapper","responsive","pretifyName","name","replace","split","word","charAt","toUpperCase","slice","join","getColumnNamesFromItems","items","filter","el","align","borderColor","borderless","caption","captionTop","columns","footer","hover","small","striped","stripedColumns","tableFootProps","tableHeadProps","columnNames","useMemo","column","key","getColumnNames","CTableCaption","index","_props","_style","style","label","getColumnLabel","colName","_cellProps","props","active","Component"],"sourceRoot":""}